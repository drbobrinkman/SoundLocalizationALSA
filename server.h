/** \file server.h
 * A very simple web server to expose the getSoundsSince method of Tracker
 * as a json file.
 *
 * Also provides some debug views of the data
 *
 * \author Bo Brinkman <dr.bo.brinkman@gmail.com>
 * \date 2016-07-28
 */

/*
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 **/

#pragma once

#include <vector>
#include <cstdint>

#include "tracker.h"

#include <boost/network/protocol/http/server.hpp>
namespace http = boost::network::http;

class Server;
/*! The type of the http_server, customized with our Server class */
typedef http::server<Server> http_server;

/*! Web server that can serve the getSoundsSince data from Tracker as json,
 *  and also provide debug views of the data.
 *
 * \note Singleton, with lazy initialization. (Meyers style singleton)
 */
class Server {
 public:
  /*! Return the singleton instance. */
  static Server& getInstance(Tracker& trk){
    static Server instance(trk);
    return instance;
  }
  
 private:
  //ctor and dtor are private to encourage correct usage of singleton
  Server(Tracker& itrck);
  ~Server();

  /*! Server needs to be able to access the Tracker on demand */
  Tracker& trck;

  /*! Change to false if someone accesses the /exit endpoint. Allows
   *   for remote restart of the server. */
  bool running=true;
  
 public:
  /*! Copy ctor deleted so that we don't accidentally make a copy */
  Server(Server const&) = delete;
  /*! Copy assignment deleted so that we don't accidentally make a copy */
  void operator=(Server const&) = delete;

  /*! Check to see if server still running.
   * 
   * \return false if someone has accessed the /exit endpoint. Allows
   *  for remote kill/restart of the server. Otherwise, return true */
  bool isRunning();

  /*! For debugging purposes, provide a copy of the sound data to the
   *   server.
   *
   * \param ibuffer a sound clip, assumed to be 4 channels, interleaved
   * \param iloudness the standard deviation of the loudest channel
   * \param loc The delays for channels 1, 2, and 3 vs. channel 0. Used
   *        for drawing the 4 channels correctly aligned
   * \param iframeNum The frame number for the frame of data being provided
   *
   * \bug Right now this method MUST be called once for each frame of audio,
   *      because we need the frameNumber when serving sounds.json. Should
   *      decouple the debug functionality from the necessary functionality
   *      TODO 
   */
  void putBuffer(std::vector<int16_t> &ibuffer, float iloudness,
		 std::vector<float> loc,
		 unsigned long iframeNum);

 private:
  std::vector<int16_t> buffer;
  std::vector<float> offsets;

  float loudness;
  unsigned long frameNumber;
  unsigned long frameNumberLastSentData = -1;
  
  http_server* p_server = nullptr;
  
 public:
  /*! Start the server */
  void run();

  /*! Callback to handle any log messages generated by the server
   * 
   * \param info a log message provided by the server */
  void log(http_server::string_type const &info);
  /*! Callback to handle http requests 
   *
   * \param request The request object, which was received and packaged by
   * cpp-netlib for us to handle
   * \param response Our response to the request
   */
  void operator() (http_server::request const &request,
		   http_server::response &response);
};
